<ParametricDialog xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="ParametricDialog.xsd">
  <Id>getFlatHolderAccountingParamSheetParametricDialog</Id>
  <Height>100</Height>
  <Width>400</Width>
  <Buttons>
    <DialogButton>
      <Title>OK</Title>
      <Order>0</Order>
      <DialogModalResult>Ok</DialogModalResult>
    </DialogButton>
    <DialogButton>
      <Title>Отмена</Title>
      <Order>1</Order>
      <DialogModalResult>Cancel</DialogModalResult>
    </DialogButton>
  </Buttons>
  <AllowResize>false</AllowResize>
  <Title>Параметры</Title>  
  <CloseAction>CloseButton</CloseAction>
  <IsSavedState>true</IsSavedState>
  <IsCollectInfoSnapshot>true</IsCollectInfoSnapshot>
  <InitScript HasEscapedContent="true">
    <![CDATA[
    function(sender, args)
    {      
      sender.Shown.AddHandler(function(s, a)
      {                  
        let 
          parametric = Core.Dialogs.ParametricDialog.prototype.currentInstance,        
          hasRequiredGroupPrintControl = parametric.getControlByParameterName("hasRequiredGroupPrint"),
          allChannelsToGroupPrintingControl = parametric.getControlByParameterName("allChannelsToGroupPrinting");
                  
        const           
          periodBeginControlDefaultValue = (new Date()).addDays(-1),
          periodEndControlDefaultValue = new Date();
          
        let 
          periodBeginControl = parametric.getControlByParameterName("periodBegin"),
          periodEndControl = parametric.getControlByParameterName("periodEnd");
        
        if(periodBeginControl !== null && (periodBeginControl.GetValue() === null || periodBeginControl.GetValue().valueOf() === (new Date(0)).valueOf()))
        {
          periodBeginControl.SetValue(periodBeginControlDefaultValue);
        }
        if(periodEndControl !== null && (periodEndControl.GetValue() === null || periodEndControl.GetValue().valueOf() === (new Date(0)).valueOf()))
        {
          periodEndControl.SetValue(periodEndControlDefaultValue);
        }        
        
        const currentDevice = DevExpress.devices.current();          
        if(currentDevice.deviceType == Core.Resources.DeviceType.phone)
        {
            hasRequiredGroupPrintControl.SetChecked(true);
            allChannelsToGroupPrintingControl.SetChecked(false);            
            
            parametric.getControlByParameterName("stopLongRunningReportTextTemplate").SetValue
            (
              "Отчет {0} сформирован.<br/>Время формирования составило с {1:N2} сек.<br/><br/><br/> {2}"
            );
            parametric.getControlByParameterName("startLongRunningReportTextTemplate").SetValue
            (
              "<b>Внимание!</b> Запущена операция асинхронного формирования отчета. Отчет будет сформирован через несколько секунд!"
            );
            parametric.getLayoutItemByParameterName("groupPrintingFileFormat").SetVisible(true);            
            parametric.getParametricDialog().UpdatePosition();
        }
        else
        {            
            parametric.getControlByParameterName("startLongRunningReportTextTemplate").SetValue(null);
            parametric.getControlByParameterName("stopLongRunningReportTextTemplate").SetValue(null);
            allChannelsToGroupPrintingControl.SetChecked(true);
        }
      });      
    }
    ]]>
    </InitScript>
  <Descriptors>
    
    <FormLayoutItemDescriptor>
      <Caption></Caption>
      <Name>channelId</Name>
      <TypeCode>Int32</TypeCode>
      <ParameterValueSourceType>FromInternalCode</ParameterValueSourceType>
      <NestedExtension>Default</NestedExtension>
      <Value>0</Value>
    </FormLayoutItemDescriptor>
    
    <FormLayoutItemDescriptor ClientVisible="false">
      <Caption></Caption>	    
      <Name>startLongRunningReportTextTemplate</Name>
      <TypeCode>String</TypeCode>
      <ParameterValueSourceType>FromUser</ParameterValueSourceType>
      <NestedExtension>Default</NestedExtension>
      <Value></Value>
    </FormLayoutItemDescriptor>
    
    <FormLayoutItemDescriptor ClientVisible="false">
      <Caption></Caption>	    	    
      <Name>stopLongRunningReportTextTemplate</Name>
      <TypeCode>String</TypeCode>
      <ParameterValueSourceType>FromUser</ParameterValueSourceType>
      <NestedExtension>Default</NestedExtension>
      <Value></Value>
    </FormLayoutItemDescriptor>

    <FormLayoutItemDescriptor ClientVisible="false">
       <Caption></Caption>	    
      <Name>allChannelsToGroupPrinting</Name>
      <TypeCode>Boolean</TypeCode>
      <ParameterValueSourceType>FromUser</ParameterValueSourceType>
      <NestedExtension>CheckBox</NestedExtension>
      <FormLayoutItemExtenders>
        <FormLayoutItemExtender>
          <PropertiesChain>NestedExtensionSettings.Properties.TextFormatString</PropertiesChain>
          <Value>true</Value>
        </FormLayoutItemExtender>
      </FormLayoutItemExtenders>
    </FormLayoutItemDescriptor>

    <FormLayoutItemDescriptor>
			<Caption>Параметр-вариатор</Caption>
			<Name>variator</Name>
			<TypeCode>String</TypeCode>
			<ParameterValueSourceType>FromInternalCode</ParameterValueSourceType>
			<NestedExtension>Default</NestedExtension>
			<Value>channelId</Value>
		</FormLayoutItemDescriptor>

		<FormLayoutItemDescriptor>
			<Caption>Источник вариации</Caption>
			<Name>variatorSource</Name>
			<TypeCode>String</TypeCode>
			<ParameterValueSourceType>FromInternalCode</ParameterValueSourceType>
			<NestedExtension>Default</NestedExtension>
			<Value>
        SELECT
        ROW_NUMBER() OVER(PARTITION BY [DistrictId] ORDER BY [BuildingAddress]) Num,
        [DistrictId],
        [ChannelId],
        CONCAT([BuildingAddress], &apos; - &apos; , &apos;(&apos;, [ChannelDescription], &apos;)&apos;) [OutlineExpression]
        FROM
        (
        SELECT
        [Channel].[Id] [ChannelId],
        [Channel].[Description] [ChannelDescription],
        [Building].[DistrictId],
        [dbo].[Trim]
        (
        REPLACE
        (
        REPLACE
        (
        [dbo].[RegExReplace]([Building].[Description], &apos;(улица|ул\.|проспект|пр\.|\s+улица)&apos;, &apos;&apos;),
        [City].[Description],
        &apos;&apos;
        ), &apos; ,&apos;, &apos;,&apos;), &apos;, &apos;) [BuildingAddress]

        FROM [Business].[Channel] [Channel] WITH(NOLOCK)

        INNER JOIN [Business].[Placement] [Placement] WITH(NOLOCK)
        ON [Channel].[PlacementId] = [Placement].[Id]

        INNER JOIN [Business].[UserAdditionalInfo] [UserAdditionalInfo] WITH(NOLOCK)
        ON [Placement].[UserAdditionalInfoId] = [UserAdditionalInfo].[Id]

        INNER JOIN  [Business].[Building] [Building] WITH(NOLOCK)
        ON [Building].[Id] = [Placement].[BuildingId]

        INNER JOIN  [Dictionaries].[District] [District] WITH(NOLOCK)
        ON [District].[Id] = [Building].[DistrictId]

        INNER JOIN  [Dictionaries].[City] [City] WITH(NOLOCK)
        ON [City].[Id] = [District].[CityId]

        WHERE [UserAdditionalInfo].[Id] =
        (
        SELECT TOP(1) [User].[Id] FROM [Admin].[User] [User] WITH(NOLOCK)
        INNER JOIN [Admin].[Role] [Role] WITH(NOLOCK) ON [User].[RoleId] = [Role].[Id] AND [Role].[Code] = &apos;HOLDER&apos;
        WHERE [User].[UserName] = &apos;{userName}&apos;
        )

        ) [A] WHERE (A.ChannelId = {channelId} OR {allChannelsToGroupPrinting} = 1)  
      </Value>
		</FormLayoutItemDescriptor>

    <FormLayoutItemDescriptor ClientVisible="false">
      <Caption>Формат файлового вывода</Caption>
      <Name>groupPrintingFileFormat</Name>
      <TypeCode>String</TypeCode>
      <ParameterValueSourceType>FromUser</ParameterValueSourceType>
      <NestedExtension>ComboBox</NestedExtension>

      <FormLayoutItemListBoxSetting>
        <DataSourceType>DictionaryList</DataSourceType>
        <DataSource>
          [{Id: 1, Code: "pdf", Description: "Формат Pdf"},
          {Id: 2, Code: "xls", Description: "Формат Xls"},
          {Id: 3, Code: "xlsx", Description: "Формат Xlsx"},
          {Id: 4, Code: "rtf", Description: "Формат Rtf"},
          {Id: 5, Code: "docx", Description: "Формат Docx"},
          {Id: 6, Code: "pptx", Description: "Формат Pptx"}]
        </DataSource>
        <FormLayoutItemListBoxColumns>
          <FormLayoutItemListBoxColumn>
            <FieldName>Id</FieldName>
            <Caption>Ид</Caption>
            <Width>20</Width>
          </FormLayoutItemListBoxColumn>
          <FormLayoutItemListBoxColumn>
            <FieldName>Description</FieldName>
            <Caption>Наименование</Caption>
            <Width>200</Width>
          </FormLayoutItemListBoxColumn>
        </FormLayoutItemListBoxColumns>
      </FormLayoutItemListBoxSetting>

      <FormLayoutItemExtenders>
        <FormLayoutItemExtender>
          <PropertiesChain>NestedExtensionSettings.Properties.ValueField</PropertiesChain>
          <Value>Code</Value>
        </FormLayoutItemExtender>
        <FormLayoutItemExtender>
          <PropertiesChain>NestedExtensionSettings.Properties.TextField</PropertiesChain>
          <Value>Description</Value>
        </FormLayoutItemExtender>
        <FormLayoutItemExtender>
          <PropertiesChain>NestedExtensionSettings.Properties.TextFormatString</PropertiesChain>
          <Value>{1}</Value>
        </FormLayoutItemExtender>

      </FormLayoutItemExtenders>

    </FormLayoutItemDescriptor>

    <FormLayoutItemDescriptor>
      <Caption>Каналы приборов учета</Caption>
      <Name>channelId1</Name>
      <TypeCode>Int32</TypeCode>
      <ParameterValueSourceType>FromUser</ParameterValueSourceType>
      <NestedExtension>ComboBox</NestedExtension>
      
      <FormLayoutItemListBoxSetting>
        <DataSourceType>DictionaryByQuery</DataSourceType>
        <DataSource>DictionaryEntity</DataSource>
        <DataSourceQuery>
          SELECT
          [Channel].[Id] [Id],
          CONCAT([ResourceSystemType].[ShortName], &apos; / &apos;, [Channel].[Description]) [Code]

          FROM [Business].[Channel] [Channel] WITH(NOLOCK)

          INNER JOIN [Business].[Placement] [Placement] WITH(NOLOCK)
          ON [Channel].[PlacementId] = [Placement].[Id]
          INNER JOIN [Business].[UserAdditionalInfo] [UserAdditionalInfo] WITH(NOLOCK)
          ON [Placement].[UserAdditionalInfoId] = [UserAdditionalInfo].[Id]
          INNER  JOIN [Dictionaries].[ResourceSystemType] [ResourceSystemType] WITH(NOLOCK)
          ON [Channel].[ResourceSystemTypeId] = [ResourceSystemType].[Id]

          WHERE [UserAdditionalInfo].[Id] =
          (
          SELECT TOP(1) [User].[Id] FROM [Admin].[User] [User] WITH(NOLOCK)
          INNER JOIN [Admin].[Role] [Role] WITH(NOLOCK) ON [User].[RoleId] = [Role].[Id] AND [Role].[Code] = &apos;HOLDER&apos;
          WHERE [User].[UserName] = @userName
          )
        </DataSourceQuery>
        <FormLayoutItemListBoxColumns>
          <FormLayoutItemListBoxColumn>
            <FieldName>Id</FieldName>
            <Caption></Caption>
            <Width>50</Width>
          </FormLayoutItemListBoxColumn>
          <FormLayoutItemListBoxColumn>
            <FieldName>Code</FieldName>
            <Caption></Caption>
            <Width>250</Width>
          </FormLayoutItemListBoxColumn>          
        </FormLayoutItemListBoxColumns>
                
      </FormLayoutItemListBoxSetting>
      <Value>0</Value>
        
        <FormLayoutItemExtenders>        
          <FormLayoutItemExtender>
            <PropertiesChain>NestedExtensionSettings.ReadOnly</PropertiesChain>
            <Value>false</Value>
          </FormLayoutItemExtender>
        
          <FormLayoutItemExtender>
            <PropertiesChain>NestedExtensionSettings.Properties.ValueField</PropertiesChain>
            <Value>Id</Value>
          </FormLayoutItemExtender>
          <FormLayoutItemExtender>
            <PropertiesChain>NestedExtensionSettings.Properties.TextField</PropertiesChain>
            <Value>Code</Value>
          </FormLayoutItemExtender>
          <FormLayoutItemExtender>
            <PropertiesChain>NestedExtensionSettings.Properties.TextFormatString</PropertiesChain>
            <Value>{1}</Value>
          </FormLayoutItemExtender>
      </FormLayoutItemExtenders>
      
    </FormLayoutItemDescriptor>
    
    <FormLayoutItemDescriptor>
      <Caption>Начало периода</Caption>
      <Name>periodBegin</Name>
      <TypeCode>DateTime</TypeCode>
      <ParameterValueSourceType>FromUser</ParameterValueSourceType>
      <NestedExtension>DateEdit</NestedExtension>           
    </FormLayoutItemDescriptor>
    
    <FormLayoutItemDescriptor>
      <Caption>Конец периода</Caption>
      <Name>periodEnd</Name>
      <TypeCode>DateTime</TypeCode>
      <ParameterValueSourceType>FromUser</ParameterValueSourceType>
      <NestedExtension>DateEdit</NestedExtension>      
    </FormLayoutItemDescriptor>
    
    <FormLayoutItemDescriptor ClientVisible="false">
      <Caption>Групповая печать</Caption>
      <Name>hasRequiredGroupPrint</Name>
      <TypeCode>Boolean</TypeCode>
      <ParameterValueSourceType>FromUser</ParameterValueSourceType>
      <NestedExtension>CheckBox</NestedExtension>
      <Value>false</Value>
      <FormLayoutItemExtenders>
        <FormLayoutItemExtender>
          <PropertiesChain>NestedExtensionSettings.Properties.ClientSideEvents.CheckedChanged</PropertiesChain>
          <Value HasEscapedContent="true">
            function(sender, args)
            {
              let parametric = Core.Dialogs.ParametricDialog.prototype.currentInstance,
              value = sender.GetChecked();

              let groupPrintingFileFormatItem = parametric.getLayoutItemByParameterName("groupPrintingFileFormat");
              groupPrintingFileFormatItem.SetVisible(value);
            }
          </Value>
        </FormLayoutItemExtender>
      </FormLayoutItemExtenders>
    </FormLayoutItemDescriptor>

  </Descriptors>
</ParametricDialog>
