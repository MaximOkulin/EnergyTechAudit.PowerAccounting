<ParametricDialog xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="ParametricDialog.xsd">
	<!--Параметрик для выбора типа асинхронного архива ТВ7 -->
	<Id>getTv7MeasurementDeviceJournal</Id>
	<Height>100</Height>
	<Width>400</Width>
	<Buttons>
		<DialogButton>
			<Title>OK</Title>
			<Order>0</Order>
			<DialogModalResult>Ok</DialogModalResult>
		</DialogButton>
		<DialogButton>
			<Title>Отмена</Title>
			<Order>1</Order>
			<DialogModalResult>Cancel</DialogModalResult>
		</DialogButton>
	</Buttons>
	<AllowResize>false</AllowResize>
	<Title>Параметры</Title>
	<CloseAction>CloseButton</CloseAction>
	<IsSavedState>true</IsSavedState>
	<IsCollectInfoSnapshot>true</IsCollectInfoSnapshot>
	<InitScript HasEscapedContent="true">
    function(sender, args)
    {
      sender.Shown.AddHandler(function(s, a)
      {
        // сброс по-умолчанию параметра "hasRequiredGroupPrint"
        var hasRequiredGroupPrintControl = 
          Core.Helpers
          .DevExpress
          .getDxControlByName("getTv7MeasurementDeviceJournal_hasRequiredGroupPrint");
        
        hasRequiredGroupPrintControl.SetChecked(false);
               
      });
    }
    </InitScript>
	<Descriptors>

	  <FormLayoutItemDescriptor ClientVisible="false">
	    <Caption>Формат групповой печати</Caption>
	    <Name>groupPrintingFileFormat</Name>
	    <TypeCode>String</TypeCode>
	    <ParameterValueSourceType>FromUser</ParameterValueSourceType>
	    <NestedExtension>ComboBox</NestedExtension>

	    <FormLayoutItemListBoxSetting>
	      <DataSourceType>DictionaryList</DataSourceType>
	      <DataSource>
	        [{Id: 1, Code: "pdf", Description: "Формат Pdf"},
	        {Id: 2, Code: "xls", Description: "Формат Xls"},
	        {Id: 3, Code: "xlsx", Description: "Формат Xlsx"},
	        {Id: 4, Code: "rtf", Description: "Формат Rtf"},
	        {Id: 5, Code: "docx", Description: "Формат Docx"},
	        {Id: 6, Code: "pptx", Description: "Формат Pptx"}]
	      </DataSource>
	      <FormLayoutItemListBoxColumns>
	        <FormLayoutItemListBoxColumn>
	          <FieldName>Id</FieldName>
	          <Caption>Ид</Caption>
	          <Width>20</Width>
	        </FormLayoutItemListBoxColumn>
	        <FormLayoutItemListBoxColumn>
	          <FieldName>Description</FieldName>
	          <Caption>Наименование</Caption>
	          <Width>200</Width>
	        </FormLayoutItemListBoxColumn>
	      </FormLayoutItemListBoxColumns>
	    </FormLayoutItemListBoxSetting>

	    <FormLayoutItemExtenders>
	      <FormLayoutItemExtender>
	        <PropertiesChain>NestedExtensionSettings.Properties.ValueField</PropertiesChain>
	        <Value>Code</Value>
	      </FormLayoutItemExtender>
	      <FormLayoutItemExtender>
	        <PropertiesChain>NestedExtensionSettings.Properties.TextField</PropertiesChain>
	        <Value>Description</Value>
	      </FormLayoutItemExtender>
	      <FormLayoutItemExtender>
	        <PropertiesChain>NestedExtensionSettings.Properties.TextFormatString</PropertiesChain>
	        <Value>{1}</Value>
	      </FormLayoutItemExtender>

	    </FormLayoutItemExtenders>

	  </FormLayoutItemDescriptor>

		<FormLayoutItemDescriptor>
			<Caption></Caption>
			<Name>channelId</Name>
			<TypeCode>Int32</TypeCode>
			<ParameterValueSourceType>FromInternalCode</ParameterValueSourceType>
			<NestedExtension>Default</NestedExtension>
			<Value>0</Value>
		</FormLayoutItemDescriptor>
		<FormLayoutItemDescriptor>
			<Caption>Канал</Caption>
			<Name>channelId1</Name>
			<TypeCode>Int32</TypeCode>
			<ParameterValueSourceType>FromUser</ParameterValueSourceType>
			<NestedExtension>ComboBox</NestedExtension>
			<FormLayoutItemListBoxSetting>
				<DataSourceType>DictionaryByQuery</DataSourceType>
				<DataSource>DictionaryEntity</DataSource>
				<DataSourceQuery>
          SELECT
          [Ch].[Id] [Id],
          [Ch].[Description] [Code],
          [R].[Description] [Description]
          FROM [Business].[Channel] [Ch] WITH(NOLOCK)
          INNER JOIN [Dictionaries].[ResourceSystemType] [R] WITH(NOLOCK)
          ON [Ch].[ResourceSystemTypeId] = [R].[Id]
          WHERE [Ch].[Id] = @channelId
        </DataSourceQuery>
				<FormLayoutItemListBoxColumns>
					<FormLayoutItemListBoxColumn>
						<FieldName>Id</FieldName>
						<Caption></Caption>
						<Width>20</Width>
					</FormLayoutItemListBoxColumn>
					<FormLayoutItemListBoxColumn>
						<FieldName>Code</FieldName>
						<Caption></Caption>
						<Width>100</Width>
					</FormLayoutItemListBoxColumn>
					<FormLayoutItemListBoxColumn>
						<FieldName>Description</FieldName>
						<Caption></Caption>
						<Width>200</Width>
					</FormLayoutItemListBoxColumn>
				</FormLayoutItemListBoxColumns>
			</FormLayoutItemListBoxSetting>
			<Value>0</Value>
			<FormLayoutItemExtenders>
				<FormLayoutItemExtender>
					<PropertiesChain>NestedExtensionSettings.Properties.EnableClientSideAPI</PropertiesChain>
					<Value>true</Value>
				</FormLayoutItemExtender>
				<FormLayoutItemExtender>
					<PropertiesChain>NestedExtensionSettings.ReadOnly</PropertiesChain>
					<Value>false</Value>
				</FormLayoutItemExtender>
				<FormLayoutItemExtender>
					<PropertiesChain>NestedExtensionSettings.Properties.ValueField</PropertiesChain>
					<Value>Id</Value>
				</FormLayoutItemExtender>
				<FormLayoutItemExtender>
					<PropertiesChain>NestedExtensionSettings.Properties.TextField</PropertiesChain>
					<Value>Description</Value>
				</FormLayoutItemExtender>
				<FormLayoutItemExtender>
					<PropertiesChain>NestedExtensionSettings.Properties.TextFormatString</PropertiesChain>
					<Value>{1}</Value>
				</FormLayoutItemExtender>
			</FormLayoutItemExtenders>
		</FormLayoutItemDescriptor>
		<FormLayoutItemDescriptor>
			<Caption>Тип архива</Caption>
			<Name>asyncArchiveTypeId</Name>
			<TypeCode>Int32</TypeCode>
			<ParameterValueSourceType>FromUser</ParameterValueSourceType>
			<NestedExtension>ComboBox</NestedExtension>
			<FormLayoutItemListBoxSetting>
				<DataSourceType>DictionaryList</DataSourceType>
				<DataSource>
          [{Id:0, Code: "DatabaseChanges", Description: "Архив изменений базы данных"},
          {Id:1, Code: "Events", Description: "Архив событий"},
          {Id:2, Code: "Diagnostic", Description: "Диагностический архив"}]
        </DataSource>
				<FormLayoutItemListBoxColumns>
					<FormLayoutItemListBoxColumn>
						<FieldName>Id</FieldName>
						<Caption>Ид</Caption>
						<Width>20</Width>
					</FormLayoutItemListBoxColumn>
					<FormLayoutItemListBoxColumn>
						<FieldName>Description</FieldName>
						<Caption>Наименование</Caption>
						<Width>250</Width>
					</FormLayoutItemListBoxColumn>
				</FormLayoutItemListBoxColumns>
			</FormLayoutItemListBoxSetting>
			<FormLayoutItemExtenders>
				<FormLayoutItemExtender>
					<PropertiesChain>NestedExtensionSettings.Properties.ValueField</PropertiesChain>
					<Value>Id</Value>
				</FormLayoutItemExtender>
				<FormLayoutItemExtender>
					<PropertiesChain>NestedExtensionSettings.Properties.TextField</PropertiesChain>
					<Value>Description</Value>
				</FormLayoutItemExtender>
				<FormLayoutItemExtender>
					<PropertiesChain>NestedExtensionSettings.Properties.TextFormatString</PropertiesChain>
					<Value>{1}</Value>
				</FormLayoutItemExtender>
			</FormLayoutItemExtenders>
		</FormLayoutItemDescriptor>
		<FormLayoutItemDescriptor ClientVisible="false">
			<Caption>Групповая печать</Caption>
			<Name>hasRequiredGroupPrint</Name>
			<TypeCode>Boolean</TypeCode>
			<ParameterValueSourceType>FromUser</ParameterValueSourceType>
			<NestedExtension>CheckBox</NestedExtension>
			<Value>false</Value>
			<FormLayoutItemExtenders>
				<FormLayoutItemExtender>
					<PropertiesChain>NestedExtensionSettings.Properties.ClientSideEvents.CheckedChanged</PropertiesChain>
					<Value HasEscapedContent="true">
            function(sender, args)
            {
              let parametric = Core.Dialogs.ParametricDialog.prototype.currentInstance,
					      layout = parametric.getLayoutControl(),          
                groupPrintingFileFormatItem = parametric.getLayoutItemByParameterName("groupPrintingFileFormat"),
                channelIdItem = parametric.getLayoutItemByParameterName("channelId1");
                
					    let visible = sender.GetChecked();
              
              channelIdItem.SetVisible(!visible);
              groupPrintingFileFormatItem.SetVisible(visible);            
            }
          </Value>
				</FormLayoutItemExtender>
			</FormLayoutItemExtenders>
		</FormLayoutItemDescriptor>
		<FormLayoutItemDescriptor>
			<Caption>Параметр-вариатор</Caption>
			<Name>variator</Name>
			<TypeCode>String</TypeCode>
			<ParameterValueSourceType>FromInternalCode</ParameterValueSourceType>
			<NestedExtension>Default</NestedExtension>
			<Value>channelId</Value>
		</FormLayoutItemDescriptor>
		<FormLayoutItemDescriptor>
			<Caption>Источник вариации</Caption>
			<Name>variatorSource</Name>
			<TypeCode>String</TypeCode>
			<ParameterValueSourceType>FromInternalCode</ParameterValueSourceType>
			<NestedExtension>Default</NestedExtension>
			<Value>
        SELECT
        ROW_NUMBER() OVER(PARTITION BY [Channel].[ResourceSystemTypeId] ORDER BY [Channel].[ResourceSystemTypeId]) [Num],
        [ChannelId],
        CONCAT([Building].[Description], &apos; - &apos; , &apos;(&apos;, [Channel].[Description], &apos;)&apos;) [OutlineExpression]

        FROM [Business].[UserLinkChannel] WITH(NOLOCK)

        INNER JOIN [Business].[Channel] [Channel] WITH(NOLOCK)
        ON [Business].[UserLinkChannel].[ChannelId] = [Channel].[Id]

        INNER JOIN [Business].[Placement] [Placement] WITH(NOLOCK)
        ON [Channel].[PlacementId] = [Placement].[Id]

        INNER JOIN [Business].[Building] [Building] WITH(NOLOCK)
        ON [Placement].[BuildingId] = [Building].[Id]

        INNER JOIN [Business].[MeasurementDevice] [MeasurementDevice] WITH(NOLOCK)
        ON [Channel].[MeasurementDeviceId] = [MeasurementDevice].[Id]

        INNER JOIN [Admin].[User] [User] WITH (NOLOCK)
        ON [Business].[UserLinkChannel].[UserId] = [User].[Id]

        WHERE [User].[UserName] = &apos;{userName}&apos; AND [MeasurementDevice].[DeviceId] = 27
      </Value>
		</FormLayoutItemDescriptor>
		<FormLayoutItemDescriptor ClientVisible="true">
			<Caption> </Caption>
			<Name>moreButton</Name>
			<TypeCode>Empty</TypeCode>
			<ParameterValueSourceType>FromUser</ParameterValueSourceType>
			<NestedExtension>Button</NestedExtension>
			<FormLayoutItemExtenders>
				<FormLayoutItemExtender>
					<PropertiesChain>NestedExtensionSettings.Text</PropertiesChain>
					<Value>Более...</Value>
				</FormLayoutItemExtender>
				<FormLayoutItemExtender>
					<PropertiesChain>NestedExtensionSettings.RenderMode</PropertiesChain>
					<Value>Link</Value>
				</FormLayoutItemExtender>
				<FormLayoutItemExtender>
					<PropertiesChain>NestedExtensionSettings.ClientSideEvents.Init</PropertiesChain>
					<Value HasEscapedContent="true">
           function(sender, args)
           {
            jQuery("#getTv7MeasurementDeviceJournal_moreButton").css(
            {
              "width": "60px",
              "float": "right",
              "margin-right": "3px"
            });            
           }
           </Value>
				</FormLayoutItemExtender>
				<FormLayoutItemExtender>
					<PropertiesChain>NestedExtensionSettings.ClientSideEvents.Click</PropertiesChain>
					<Value HasEscapedContent="true">
           function(sender, args)
           {              
              var layout = Core.Helpers.DevExpress.getDxControlByName("getTv7MeasurementDeviceJournalLayout");
              
              layout.moreButtonState = layout.moreButtonState == undefined ? true : !layout.moreButtonState;
                            
              var hasRequiredGroupPrintItem = layout.GetItemByName("getTv7MeasurementDeviceJournal_hasRequiredGroupPrint");
              
              hasRequiredGroupPrintItem.SetVisible(layout.moreButtonState);
              
              sender.SetText(layout.moreButtonState ? "Менее...": "Более...");
           }
           </Value>
				</FormLayoutItemExtender>
			</FormLayoutItemExtenders>
		</FormLayoutItemDescriptor>
	</Descriptors>
</ParametricDialog>
